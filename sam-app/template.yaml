AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for Amazon-S3-Bucket-Load-Test

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3




Parameters:


  VpcCidrBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: CIDR block of the new VPC where AWS Fargate will be placed
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18

  SubnetACidrBlock:
    Type: String
    Default: 192.168.0.0/20
    Description: CIDR block for subnet A of the AWS Fargate VPC
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18

  SubnetBCidrBlock:
    Type: String
    Default: 192.168.16.0/20
    Description: CIDR block for subnet B of the AWS Fargate VPC
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

  EgressCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: The Cidir Block to restrict the ECS container outbound access
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

  HostedZone:
    Type: String
    Default: "loadtest.com"
    Description: The DNS name of the Amazon Route 53 hosted zone
    AllowedPattern: '(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)'
    ConstraintDescription: must be a valid DNS zone name.


Resources:

# ========================================================================
## Shared Resources
# ========================================================================
  CloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-cloudwatch-policy
      Roles:
        # - !Ref LambdaApiRole
        # - !Ref LambdaResultsRole
        - !Ref EcsTaskExecutionRole
        - !Ref ContainerCodeBuildRole
        - !Ref ContainerCodePipelineRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AWSXrayFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"

  ContainerCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-code-build-policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:ListImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetRepositoryPolicy
                Resource:
                  - !Sub ${GETEcrRepository.Arn}
                  - !Sub ${PUTEcrRepository.Arn}
                  - !Sub ${XRayEcrRepository.Arn}
              -
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                  - s3:PutObject
                Resource:
                    - !Sub ${ContainerBucket.Arn}
                    - !Sub ${ContainerBucket.Arn}/*

  ContainerCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-code-pipeline-policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListBucketVersions
                  - s3:PutObject
                Resource:
                  - !Sub ${ContainerBucket.Arn}
                  - !Sub ${ContainerBucket.Arn}/*
              -
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub ${XRayContainerCodeBuild.Arn}
              -
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub ${PUTContainerCodeBuild.Arn}
              -
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub ${GETContainerCodeBuild.Arn}

  EcsCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: !Sub ${AWS::StackName}
        Tags:
          -
            Key: Project
            Value: S3 Put LoadTest

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadTest Tasks Security Group
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref EgressCidr

  EcsTaskSqsQueue: 
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120

  StorageBucket:
    # DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      # LoggingConfiguration:
        # DestinationBucketName: !Ref LogsBucket
        # LogFilePrefix: scenarios-bucket-access/
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #   - ServerSideEncryptionByDefault:
      #       SSEAlgorithm: aws:kms
      Tags:
        -
          Key: Project
          Value: Amazon S3 Load Testing

  ContainerBucket:
    # DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
      Tags:
        -
          Key: created by
          Value: study gurus



# ========================================================================
## VPC Resources
# ========================================================================
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: SolutionId
          Value: SO0062

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetACidrBlock
      AvailabilityZone:
        !Select
            - 0
            - !GetAZs
      VpcId: !Ref Vpc

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetBCidrBlock
      AvailabilityZone:
        !Select
            - 0
            - !GetAZs
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MainRouteTable
      GatewayId: !Ref InternetGateway

  RouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PublicSubnetA

  RouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PublicSubnetB


# ================================
#   DNS Assets  
# ================================
  LoadTestDNSzone: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: 'My private hosted zone for loadtest system'
      Name: !Ref HostedZone
      VPCs: 
        - 
          VPCId: !Ref Vpc
          VPCRegion: !Sub ${AWS::Region}
      HostedZoneTags: 
        - 
          Key: 'created for'
          Value: 'LoadTest project'

  BucketNameDNSRecord:
    DependsOn: LoadTestDNSzone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join 
        - ''
        - - !Ref HostedZone
          - .
      Comment: Name for S3 bucket under test.
      Name: !Join 
        - ''
        - - 'bucket'
          - .
          - !Ref HostedZone
          - .
      Type: TXT
      TTL: '30'
      ResourceRecords: 
        - !Sub "\"${StorageBucket}\""

  SQSqueueDNSRecord:
    DependsOn: LoadTestDNSzone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join 
        - ''
        - - !Ref HostedZone
          - .
      Comment: SQS Queue name.
      Name: !Join 
        - ''
        - - 'filesqueue'
          - .
          - !Ref HostedZone
          - .
      Type: TXT
      TTL: '30'
      ResourceRecords: 
        - !Sub "\"${EcsTaskSqsQueue}\""


# ========================================================================
## Resources for PUT Container 
# ========================================================================
  PUTEcrRepository:
    # stack delte will fail as the repo is not empty.
    # DeletionPolicy: Retain
    Type: AWS::ECR::Repository

  PUTEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        -
          Essential: true
          Name: !Sub ${AWS::StackName}-load-tester
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${PUTEcrRepository}:latest
          Memory: 2048
          Environment: 
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
            # -
            #   Name: AWS_XRAY_DAEMON_ADDRESS
            #   Value: xray-daemon:2000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PUTEcsCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "load-testing"
        -
          Essential: true
          Name: !Sub ${AWS::StackName}-xray-daemon
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${XRayEcrRepository}:latest
          Cpu: 32
          Memory: 512
          Environment: 
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
            # -
            #   Name: AWS_XRAY_DAEMON_ADDRESS
            #   Value: xray-daemon:2000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref XRayEcsCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "PUT-load-testing"
          PortMappings:
            -
              ContainerPort: 2000
              # HostPort: 2000
              Protocol: udp

  PUTEcsCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365

  PUTContainerCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Builds S3 load testing container
      TimeoutInMinutes: 20
      ServiceRole: !GetAtt ContainerCodeBuildRole.Arn
      EncryptionKey: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/docker:18.09.0
        EnvironmentVariables:
          -
            Name: REPOSITORY
            Value: !Sub ${PUTEcrRepository}
          -
            Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${PUTEcrRepository}
          -
            Name: SQS_QUEUE_URL
            Value: !Ref EcsTaskSqsQueue
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
              pre_build:
                commands:
                  - echo $REPOSITORY
                  - echo $REPOSITORY_URI
                  - $(aws ecr get-login --region ${AWS::Region} --no-include-email)
              build:
                commands:
                  - cd putcontainer
                  - docker build -t $REPOSITORY:latest .
                  - ls -al
                  - docker tag $REPOSITORY:latest $REPOSITORY_URI:latest
              post_build:
                commands:
                  - docker push $REPOSITORY_URI:latest

  PUTContainerCodePipeline:
    #wait for the container
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt ContainerCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ContainerBucket
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              ActionTypeId:
                Category: Source
                Provider: S3
                Owner: AWS
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref ContainerBucket
                S3ObjectKey: putcontainer.zip
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  !Ref PUTContainerCodeBuild


# ========================================================================
## Resources for X-Ray Container 
# ========================================================================
  XRayEcrRepository:
    # stack delte will fail as the repo is not empty.
    # DeletionPolicy: Retain
    Type: AWS::ECR::Repository

  XRayEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        -
          Essential: true
          Name: !Sub ${AWS::StackName}-xray-daemon
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${XRayEcrRepository}:latest
          Cpu: 32
          Memory: 512
          Environment: 
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
            # -
          #     Name: AWS_XRAY_DAEMON_ADDRESS
          #     Value: xray-daemon:2000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref XRayEcsCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "XRay-load-testing"
          PortMappings:
            -
              ContainerPort: 2000
              # HostPort: 2000
              Protocol: udp

  XRayEcsCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365

  XRayContainerCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Builds X-Ray container
      TimeoutInMinutes: 20
      ServiceRole: !GetAtt ContainerCodeBuildRole.Arn
      EncryptionKey: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/docker:18.09.0
        EnvironmentVariables:
          -
            Name: REPOSITORY
            Value: !Sub ${XRayEcrRepository}
          -
            Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${XRayEcrRepository}
          -
            Name: SQS_QUEUE_URL
            Value: !Ref EcsTaskSqsQueue
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
              pre_build:
                commands:
                  - echo $REPOSITORY
                  - echo $REPOSITORY_URI
                  - $(aws ecr get-login --region ${AWS::Region} --no-include-email)
              build:
                commands:
                  - cd xraycontainer
                  - docker pull amazon/aws-xray-daemon
                  - ls -al
                  - docker tag amazon/aws-xray-daemon $REPOSITORY_URI:latest
              post_build:
                commands:
                  - docker push $REPOSITORY_URI:latest

  XRayContainerCodePipeline:
    #wait for the container
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt ContainerCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ContainerBucket
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              ActionTypeId:
                Category: Source
                Provider: S3
                Owner: AWS
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref ContainerBucket
                S3ObjectKey: xraycontainer.zip
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  !Ref XRayContainerCodeBuild


# ========================================================================
## Resources for GET Container 
# ========================================================================
  GETEcrRepository:
    # stack delte will fail as the repo is not empty.
    # DeletionPolicy: Retain
    Type: AWS::ECR::Repository

  GETEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        -
          Essential: true
          Name: !Sub ${AWS::StackName}-load-tester
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${GETEcrRepository}:latest
          Memory: 2048
          Environment: 
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
            # -
            #   Name: AWS_XRAY_DAEMON_ADDRESS
            #   Value: xray-daemon:2000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref GETEcsCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "load-testing"
        -
          Essential: true
          Name: !Sub ${AWS::StackName}-xray-daemon
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${XRayEcrRepository}:latest
          Cpu: 32
          Memory: 512
          Environment: 
            -
              Name: AWS_REGION
              Value: !Ref AWS::Region
            -
              Name: AWS_XRAY_DAEMON_ADDRESS
              Value: xray-daemon:2000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref XRayEcsCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "GET-load-testing"
          PortMappings:
            -
              ContainerPort: 2000
              # HostPort: 2000
              Protocol: udp

  GETEcsCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365

  GETContainerCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Builds S3 load testing container
      TimeoutInMinutes: 20
      ServiceRole: !GetAtt ContainerCodeBuildRole.Arn
      EncryptionKey: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/docker:18.09.0
        EnvironmentVariables:
          -
            Name: REPOSITORY
            Value: !Sub ${GETEcrRepository}
          -
            Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${GETEcrRepository}
          -
            Name: SQS_QUEUE_URL
            Value: !Ref EcsTaskSqsQueue
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
              pre_build:
                commands:
                  - echo $REPOSITORY
                  - echo $REPOSITORY_URI
                  - $(aws ecr get-login --region ${AWS::Region} --no-include-email)
              build:
                commands:
                  - cd getcontainer
                  - docker build -t $REPOSITORY:latest .
                  - ls -al
                  - docker tag $REPOSITORY:latest $REPOSITORY_URI:latest
              post_build:
                commands:
                  - docker push $REPOSITORY_URI:latest

  GETContainerCodePipeline:
    #wait for the container
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt ContainerCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ContainerBucket
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              ActionTypeId:
                Category: Source
                Provider: S3
                Owner: AWS
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref ContainerBucket
                S3ObjectKey: getcontainer.zip
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  !Ref GETContainerCodeBuild






















# ========================================================================
## Resources for LAMBDA TO CLEAN UP S3 BUCKETS 
# ========================================================================
  cleanupBucketOnDelete:
      DependsOn: cleanupBucketOnDeleteFunction
      Type: Custom::cleanupbucket
      Properties:
          ServiceToken: 
              Fn::GetAtt: 
                - "cleanupBucketOnDeleteFunction"
                - "Arn"
          BucketName: !Sub '${StorageBucket.Arn}'

  
  cleanupBucketOnDeleteFunction:
      DependsOn: StorageBucket
      Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
      # Type: "AWS::Lambda::Function"
      Properties:
          Role: !GetAtt cleanupOnDeleteLambdaRole.Arn
          CodeUri: cleanupBucketOnDelete/
          Handler: cleanupBucketOnDelete.lambda_handler
          Runtime: python3.7
          Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
              Variables:
                  s3_bucket_name: !Ref StorageBucket
          Timeout: 60
          Description: cleanup Bucket on Delete Lambda Lambda function.

# -------------------------------------------------------

  cleanupBucketOnDelete2:
      DependsOn: cleanupBucketOnDeleteFunction2
      Type: Custom::cleanupbucket2
      Properties:
          ServiceToken: 
              Fn::GetAtt: 
                - "cleanupBucketOnDeleteFunction2"
                - "Arn"
          BucketName: !Sub '${ContainerBucket.Arn}'

  
  cleanupBucketOnDeleteFunction2:
      DependsOn: ContainerBucket
      Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
      # Type: "AWS::Lambda::Function"
      Properties:
          Role: !GetAtt cleanupOnDeleteLambdaRole.Arn
          CodeUri: cleanupBucketOnDelete/
          Handler: cleanupBucketOnDelete.lambda_handler
          Runtime: python3.7
          Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
              Variables:
                  s3_bucket_name: !Ref ContainerBucket
          Timeout: 60
          Description: cleanup Bucket on Delete Lambda Lambda function.


  # cleanupBucketOnDeleteLambdaRole:
  #     Type: AWS::IAM::Role
  #     Properties:
  #         AssumeRolePolicyDocument:
  #             Version: '2012-10-17'
  #             Statement:
  #                 - Action: ['sts:AssumeRole']
  #                   Effect: Allow
  #                   Principal:
  #                     Service: [lambda.amazonaws.com]


  # cleanupBucketOnDeleteLambdaRolePolicy: 
  #     Type: "AWS::IAM::Policy"
  #     Properties: 
  #         PolicyName: !Sub "${AWS::StackName}-cleanupBucketOnDeleteLambdaRolePolicy"
  #         PolicyDocument: 
  #             Version: "2012-10-17"
  #             Statement: 
  #                 - Effect: "Allow"
  #                   Action: 
  #                         - "s3:*"
  #                         - "logs:*"
  #                   Resource: "*"
  #                 - Effect: "Deny"
  #                   Action: 
  #                         - "s3:DeleteBucket"
  #                   Resource: "*"
  #         Roles: 
  #             - Ref: "cleanupBucketOnDeleteLambdaRole"


# -------------------------------------------------------

  cleanupPutEcrOnDelete:
      DependsOn: cleanupPutEcrOnDeleteFunction
      Type: Custom::cleanupputrepository
      Properties:
          ServiceToken: 
              Fn::GetAtt: 
                - "cleanupPutEcrOnDeleteFunction"
                - "Arn"
          ECRRepositoryARN: !Sub '${PUTEcrRepository.Arn}'

  cleanupPutEcrOnDeleteFunction:
      DependsOn: PUTEcrRepository
      Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
      Properties:
          Role: !GetAtt cleanupOnDeleteLambdaRole.Arn
          CodeUri: cleanupEcrOnDelete/
          Handler: cleanupEcrOnDelete.lambda_handler
          Runtime: python3.7
          Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
              Variables:
                  repository_name: !Ref PUTEcrRepository
                  registryId: !Ref AWS::AccountId
          Timeout: 30
          Description: Delete PUT ECR repo Lambda function.

# -------------------------------------------------------

  cleanupGetEcrOnDelete:
      DependsOn: cleanupGetEcrOnDeleteFunction
      Type: Custom::cleanupgetrepository
      Properties:
          ServiceToken: 
              Fn::GetAtt: 
                - "cleanupGetEcrOnDeleteFunction"
                - "Arn"
          ECRRepositoryARN: !Sub '${GETEcrRepository.Arn}'

  cleanupGetEcrOnDeleteFunction:
      DependsOn: GETEcrRepository
      Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
      Properties:
          Role: !GetAtt cleanupOnDeleteLambdaRole.Arn
          CodeUri: cleanupEcrOnDelete/
          Handler: cleanupEcrOnDelete.lambda_handler
          Runtime: python3.7
          Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
              Variables:
                  repository_name: !Ref GETEcrRepository
                  registryId: !Ref AWS::AccountId
          Timeout: 30
          Description: Delete GET ECR repo Lambda function.


# -------------------------------------------------------

  cleanupXRayEcrOnDelete:
      DependsOn: cleanupXRayEcrOnDeleteFunction
      Type: Custom::cleanupxrayrepository
      Properties:
          ServiceToken: 
              Fn::GetAtt: 
                - "cleanupXRayEcrOnDeleteFunction"
                - "Arn"
          ECRRepositoryARN: !Sub '${XRayEcrRepository.Arn}'

  cleanupXRayEcrOnDeleteFunction:
      DependsOn: XRayEcrRepository
      Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
      Properties:
          Role: !GetAtt cleanupOnDeleteLambdaRole.Arn
          CodeUri: cleanupEcrOnDelete/
          Handler: cleanupEcrOnDelete.lambda_handler
          Runtime: python3.7
          Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
              Variables:
                  repository_name: !Ref XRayEcrRepository
                  registryId: !Ref AWS::AccountId
          Timeout: 30
          Description: Delete X-Ray ECR repo Lambda function.


# -------------------------------------------------------

  cleanupOnDeleteLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Action: ['sts:AssumeRole']
                    Effect: Allow
                    Principal:
                      Service: [lambda.amazonaws.com]

  cleanupOnDeleteLambdaRolePolicy: 
      Type: "AWS::IAM::Policy"
      Properties: 
          PolicyName: !Sub "${AWS::StackName}-cleanupOnDeleteLambdaRolePolicy"
          PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                  - Effect: "Allow"
                    Action: 
                          - "logs:*"
                          - "s3:*"
                          - "ecr:*"
                    Resource: "*"
                  - Effect: "Deny"
                    Action: 
                          - "s3:DeleteBucket"
                          - "ecr:delete-repository"
                    Resource: "*"
          Roles: 
              - Ref: "cleanupOnDeleteLambdaRole"





Outputs:
  StorageBucketARN:
    Description: "StorageBucket ARN"
    Value: !GetAtt StorageBucket.Arn

