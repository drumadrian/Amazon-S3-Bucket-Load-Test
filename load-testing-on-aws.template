Description: "(SO0062) - Distributed Load Testing on AWS Version 1.0.0 is a reference architecture for perform applications load testing at scale"

Parameters:

  # AdminName:
  #   Type: String
  #   Description: Then admin user name to access the Distributed Load Testing Console
  #   MinLength: 4 
  #   MaxLength: 20 
  #   AllowedPattern: '[a-zA-Z0-9-]+'
  #   ConstraintDescription: "username must be a minimum of 4 characters and cannot include spaces"

  # AdminEmail:
  #   Type: String
  #   Description: Admin user email address to access the Distributed Load Testing Console
  #   MinLength: 5 
  #   AllowedPattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' 
  #   ConstraintDescription: "Admin email must be a valid email address"

  VpcCidrBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: CIDR block of the new VPC where AWS Fargate will be placed
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18

  SubnetACidrBlock:
    Type: String
    Default: 192.168.0.0/20
    Description: CIDR block for subnet A of the AWS Fargate VPC
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18

  SubnetBCidrBlock:
    Type: String
    Default: 192.168.16.0/20
    Description: CIDR block for subnet B of the AWS Fargate VPC
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

  EgressCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: The Cidir Block to restrict the ECS container outbound access
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

# Metadata:
    # AWS::CloudFormation::Interface:
    #   ParameterGroups:
    #       -
    #         Label:
    #             default: "Console Access"
    #         Parameters:
    #             - AdminName
    #             - AdminEmail
    #       -
    #         Label:
    #             default: "AWS Fargate VPC Settings"
    #         Parameters:
    #             - VpcCidrBlock
    #             - SubnetACidrBlock
    #             - SubnetBCidrBlock
    #             - EgressCidr
    #   ParameterLabels:
    #     AdminName:
    #       default: "Console Administrator Name"
    #     AdminEmail:
    #       default: "Console Administrator Email"
    #     VpcCidrBlock:
    #       default: "AWS Fargate VPC CIDR Block"
    #     SubnetACidrBlock:
    #       default: "AWS Fargate Subnet A CIDR Blocck"
    #     SubnetBCidrBlock:
    #       default: "AWS Fargate Subnet B CIDR Blocck"
    #     EgressCidr:
    #       default: "AWS Fargate SecurityGroup CIDR Block"

# Mappings:
  # SourceCode:
  #   General:
  #     S3Bucket: solutions
  #     KeyPrefix: distributed-load-testing-on-aws/v1.0.0
  # AnonymousData:
  #   SendAnonymousData:
  #     Data: Yes

# Conditions:
#   Metrics: !Equals [ !FindInMap [AnonymousData,SendAnonymousData,Data], Yes ]

Resources:

## Roles and Permissions
  CloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-cloudwatch-policy
      Roles:
        # - !Ref LambdaApiRole
        # - !Ref LambdaResultsRole
        - !Ref EcsTaskExecutionRole
        - !Ref ContainerCodeBuildRole
        - !Ref ContainerCodePipelineRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W12
    #         reason: "The wildcard action in the logs policy is required to write to log groups, log group names are not explicit"

  # S3Policy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: !Sub ${AWS::StackName}-s3-policy
  #     Roles:
  #       - !Ref LambdaApiRole
  #       - !Ref LambdaResultsRole
  #       - !Ref EcsTaskExecutionRole
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         -
  #           Effect: Allow
  #           Action:
  #             - s3:PutObject
  #             - s3:GetObject
  #           Resource:
  #             - !Sub ${ScenariosBucket.Arn}/*
  #   Metadata:
  #     cfn_nag:
  #       rules_to_suppress:
  #         - id: W12
  #           reason: "The wildcard action in the s3 policy is required to read/write to the s3 bucket"

  # DynamoDbPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: !Sub ${AWS::StackName}-dynamodb-policy
  #     Roles:
  #       - !Ref LambdaApiRole
  #       - !Ref LambdaResultsRole
  #       - !Ref LambdaTaskRole
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         -
  #           Effect: Allow
  #           Action:
  #             - dynamodb:DeleteItem
  #             - dynamodb:GetItem
  #             - dynamodb:PutItem
  #             - dynamodb:Query
  #             - dynamodb:Scan
  #             - dynamodb:UpdateItem
  #           Resource:
  #             - !Sub ${ScenariosTable.Arn}
  #             - !Sub ${ResultsTable.Arn}

  # LambdaApiRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         -
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Policies:
  #       -
  #         PolicyName: !Sub ${AWS::StackName}-api-lambda-policy
  #         PolicyDocument:
  #           Statement:
  #             -
  #               Effect: Allow
  #               Action:
  #                 - ecs:listTasks
  #               Resource:
  #                 - "*"
  #             -
  #               Effect: Allow
  #               Action:
  #                 - ecs:RunTask
  #                 - ecs:StopTask
  #                 - ecs:describeTasks
  #               Resource:
  #                 - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
  #                 - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*:*
  #             -
  #               Effect: Allow
  #               Action:
  #                 - iam:PassRole
  #               Resource:
  #                 - !Sub ${EcsTaskExecutionRole.Arn}
  #             -
  #               Effect: Allow
  #               Action:
  #                 - "sqs:SendMessage"
  #               Resource: !Sub ${EcsTaskSqsQueue.Arn}
  #             -
  #               Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource:
  #                 !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*
  #   Metadata:
  #     cfn_nag:
  #       rules_to_suppress:
  #         - id: W11
  #           reason: "ecs:listTasks doesnot support resource level permissions"
  #         - id: W12
  #           reason: "The wildcard action in the logs policy is required to write to log groups, log group names are not explicit"

  # LambdaTaskRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         -
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Policies:
  #       -
  #         PolicyName: !Sub ${AWS::StackName}-task-lambda-policy
  #         PolicyDocument:
  #           Statement:
  #             -
  #               Effect: Allow
  #               Action:
  #                 - ecs:RunTask
  #               Resource:
  #                 - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
  #                 - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*:*
  #             -
  #               Effect: Allow
  #               Action:
  #                 - iam:PassRole
  #               Resource:
  #                 - !Sub ${EcsTaskExecutionRole.Arn}
  #             -
  #               Effect: Allow
  #               Action:
  #                 - "sqs:ReceiveMessage"
  #                 - "sqs:DeleteMessage"
  #                 - "sqs:GetQueueAttributes"
  #               Resource: !Sub ${EcsTaskSqsQueue.Arn}
  #             -
  #               Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource:
  #                 !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*
  #   Metadata:
  #     cfn_nag:
  #       rules_to_suppress:
  #         - id: W11
  #           reason: "The wildcard action in the logs policy is required to write to log groups, log group names are not explicit"

  # LambdaResultsRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         -
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Policies:
  #       -
  #         PolicyName: !Sub ${AWS::StackName}-api-lambda-policy
  #         PolicyDocument:
  #           Statement:
  #             -
  #               Effect: Allow
  #               Action:
  #                 - cloudwatch:GetMetricWidgetImage
  #               Resource: "*"
  #   Metadata:
  #     cfn_nag:
  #       rules_to_suppress:
  #         - id: W11
  #           reason: "CloudWatch GetMetricWidgetImage and ECS listTasks do not support resource level permisions"

  # LambdaCustomRole:
  #   DependsOn: CloudWatchLogsPolicy
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         -
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Policies:
  #       -
  #         PolicyName: !Sub ${AWS::StackName}-custom-resource-policy
  #         PolicyDocument:
  #           Statement:
  #             -
  #               Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource:
  #                 !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*
  #             -
  #               Effect: Allow
  #               Action:
  #                 - s3:PutObject
  #               Resource:
  #                 - !Sub ${ContainerBucket.Arn}/*
  #                 - !Sub ${ConsoleBucket.Arn}/*
  #             -
  #               Effect: Allow
  #               Action:
  #                 - s3:PutBucketNotification
  #               Resource:
  #                 - !Sub ${ScenariosBucket.Arn}
  #             -
  #               Effect: Allow
  #               Action:
  #                 - s3:GetObject
  #               Resource:
  #                 - !Join ["", ["arn:aws:s3:::",!FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region","/*"]]
  #   Metadata:
  #     cfn_nag:
  #       rules_to_suppress:
  #         - id: W11
  #           reason: "/* required to get/put objects to Amazon S3"

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  ContainerCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-code-build-policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:ListImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetRepositoryPolicy
                Resource:
                  - !Sub ${EcrRepository.Arn}
              -
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                  - s3:PutObject
                Resource:
                    - !Sub ${ContainerBucket.Arn}
                    - !Sub ${ContainerBucket.Arn}/*
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "ECR GetAuthorizationToken does not support resource level permissions"
          - id: W11
            reason: "/* required to get/put objects to Amazon S3"

  ContainerCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-code-pipeline-policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListBucketVersions
                  - s3:PutObject
                Resource:
                  - !Sub ${ContainerBucket.Arn}
                  - !Sub ${ContainerBucket.Arn}/*
              -
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub ${ContainerCodeBuild.Arn}
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "/* required to get/put objects to Amazon S3"

  # ApiLambdaExecRole:
    # Type: AWS::IAM::Role
    # Properties:
    #   AssumeRolePolicyDocument:
    #     Version: 2012-10-17
    #     Statement:
    #       -
    #         Effect: Allow
    #         Principal:
    #           Service:
    #             - apigateway.amazonaws.com
    #         Action:
    #           - sts:AssumeRole
    #   Policies:
    #     -
    #       PolicyName: !Sub ${AWS::StackName}-api-gateway-policy
    #       PolicyDocument:
    #         Statement:
    #           -
    #             Effect: Allow
    #             Action:
    #               - lambda:InvokeFunction
    #             Resource:
    #               - !Sub ${ApiServices.Arn}

  # S3LambdaInvoke:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt ResultsParser.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: s3.amazonaws.com
  #     SourceAccount: !Ref AWS::AccountId

  # ApiLambdaInvoke:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt ApiServices.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*
  
  # EcsTaskEventSourceMapping:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties: 
  #     BatchSize: 1
  #     Enabled: true
  #     EventSourceArn: !Sub ${EcsTaskSqsQueue.Arn}
  #     FunctionName: !Sub ${TaskRunner.Arn}

## Fargate VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: SolutionId
          Value: SO0062

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetACidrBlock
      AvailabilityZone:
        !Select
            - 0
            - !GetAZs
      VpcId: !Ref Vpc

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetBCidrBlock
      AvailabilityZone:
        !Select
            - 0
            - !GetAZs
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MainRouteTable
      GatewayId: !Ref InternetGateway

  RouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PublicSubnetA

  RouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PublicSubnetB

## ECS Resources
  EcrRepository:
    # stack delte will fail as the repo is not empty.
    DeletionPolicy: Retain
    Type: AWS::ECR::Repository

  EcsCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: !Sub ${AWS::StackName}
        Tags:
          -
            Key: Project
            Value: S3 Put LoadTest

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DLTS Tasks Security Group
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref EgressCidr
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W36
            reason: "flagged as not having a Description, property is GroupDescription not Description"
          - id: W40
            reason: "IpProtocol set to -1 (any) as ports are not known prior to running tests"

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        -
          Essential: true
          Name: !Sub ${AWS::StackName}-load-tester
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:latest
          Memory: 2048
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EcsCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "load-testing"

  EcsCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365


  EcsTaskSqsQueue: 
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120

## Storage
  StorageBucket:
    # DeletionPolicy: Delete
    Type: AWS::S3::Bucket
    Properties:
      # LoggingConfiguration:
        # DestinationBucketName: !Ref LogsBucket
        # LogFilePrefix: scenarios-bucket-access/
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #   - ServerSideEncryptionByDefault:
      #       SSEAlgorithm: aws:kms
      Tags:
        -
          Key: Project
          Value: Amazon S3 Load Testing

  ContainerBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
      Tags:
        -
          Key: created by
          Value: study gurus

  # ScenariosTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #     - AttributeName: testId
  #       AttributeType: S
  #     KeySchema:
  #     - AttributeName: testId
  #       KeyType: HASH
  #     BillingMode: "PAY_PER_REQUEST"

  # ResultsTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #     - AttributeName: uuid
  #       AttributeType: S
  #     - AttributeName: testId
  #       AttributeType: S
  #     KeySchema:
  #     - AttributeName: uuid
  #       KeyType: HASH
  #     GlobalSecondaryIndexes:
  #       -
  #         IndexName: "uuid-testId-index"
  #         KeySchema:
  #         - AttributeName: uuid
  #           KeyType: HASH
  #         - AttributeName: testId
  #           KeyType: RANGE
  #         Projection:
  #           ProjectionType: "ALL"
  #     TimeToLiveSpecification:
  #       AttributeName: ttlDel
  #       Enabled: true
  #     BillingMode: "PAY_PER_REQUEST"
  #     Tags:
  #       -
  #         Key: SolutionId
  #         Value: SO0062

## Container Pipeline
  ContainerCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Builds distributed load testing suite
      TimeoutInMinutes: 20
      ServiceRole: !GetAtt ContainerCodeBuildRole.Arn
      EncryptionKey: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/docker:18.09.0
        EnvironmentVariables:
          -
            Name: REPOSITORY
            Value: !Sub ${EcrRepository}
          -
            Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
              pre_build:
                commands:
                  - echo $REPOSITORY
                  - echo $REPOSITORY_URI
                  - $(aws ecr get-login --region ${AWS::Region} --no-include-email)
              build:
                commands:
                  - cd container
                  - docker build -t $REPOSITORY:latest .
                  - ls -al
                  - docker tag $REPOSITORY:latest $REPOSITORY_URI:latest
              post_build:
                commands:
                  - docker push $REPOSITORY_URI:latest

  ContainerCodePipeline:
    #wait for the container
    # DependsOn: [ CopyDockerFile, CloudWatchLogsPolicy]
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt ContainerCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ContainerBucket
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              ActionTypeId:
                Category: Source
                Provider: S3
                Owner: AWS
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref ContainerBucket
                S3ObjectKey: container.zip
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  !Ref ContainerCodeBuild



# INSERT LAMBDA TO POPULATE SQS QUEUE

# INSERT LAMBDA TO CLEAN UP S3 BUCKETS

# add environment variable for Put and Get service


# Outputs:
